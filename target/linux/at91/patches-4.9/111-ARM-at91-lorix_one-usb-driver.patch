diff --git a/drivers/usb/gadget/udc/atmel_usba_udc.c b/drivers/usb/gadget/udc/atmel_usba_udc.c
index f92f5af..551571a 100644
--- a/drivers/usb/gadget/udc/atmel_usba_udc.c
+++ b/drivers/usb/gadget/udc/atmel_usba_udc.c
--- <unnamed>
+++ <unnamed>
@@ -339,6 +339,16 @@
 	/* No Vbus detection: Assume always present */
 	return 1;
 }
+
+static int id_is_device(struct usba_udc *udc)
+{
+    if (gpio_is_valid(udc->id_pin))
+        return gpio_get_value(udc->id_pin);
+
+    /* No ID detection: Assume always device */
+    return 1;
+}
+
 
 static int id_is_device(struct usba_udc *udc)
 {
@@ -1806,13 +1816,25 @@
 	int vbus;
 
 	/* debounce */
-	udelay(10);
+       mdelay(10);
+
+       dev_dbg(&udc->pdev->dev, "ID value: %s\n", id_is_device(udc) ? "device" : "host");
+       if (!id_is_device(udc)) {
+               udc->id_prev = 0;
+               usba_writel(udc, CTRL, USBA_DISABLE_MASK);
+               return IRQ_HANDLED;
+       }
+
+       if (udc->id_prev != id_is_device(udc)) {
+               udc->id_prev = 1;
+               return IRQ_HANDLED;
+       }
 
 	mutex_lock(&udc->vbus_mutex);
 
 	vbus = vbus_is_present(udc);
 	if (vbus != udc->vbus_prev) {
-		if (vbus) {
+		if (vbus && id_is_device(udc)) {
 			usba_start(udc);
 		} else {
 			usba_stop(udc);
@@ -1942,6 +1964,9 @@
 						&flags);
 	udc->vbus_pin_inverted = (flags & OF_GPIO_ACTIVE_LOW) ? 1 : 0;
 
+        udc->id_pin = of_get_named_gpio_flags(np, "atmel,id-gpio", 0,
+                           &flags);
+
 	pp = NULL;
 	while ((pp = of_get_next_child(np, pp)))
 		udc->num_ep++;
@@ -2054,6 +2079,7 @@
 
 	udc->vbus_pin = pdata->vbus_pin;
 	udc->vbus_pin_inverted = pdata->vbus_pin_inverted;
+	udc->id_pin = pdata->id_pin;
 	udc->num_ep = pdata->num_ep;
 
 	INIT_LIST_HEAD(&eps[0].ep.ep_list);
@@ -2129,6 +2155,7 @@
 	udc->pclk = pclk;
 	udc->hclk = hclk;
 	udc->vbus_pin = -ENODEV;
+	udc->id_pin = -ENODEV;
 
 	ret = -ENOMEM;
 	udc->regs = devm_ioremap(&pdev->dev, regs->start, resource_size(regs));
diff --git a/drivers/usb/host/ohci-at91.c b/drivers/usb/host/ohci-at91.c
index c1151f6..61f4758 100644
--- a/drivers/usb/host/ohci-at91.c
+++ b/drivers/usb/host/ohci-at91.c
@@ -40,6 +40,7 @@
 struct at91_usbh_data {
 	int vbus_pin[AT91_MAX_USBH_PORTS];	/* port power-control pin */
 	int overcurrent_pin[AT91_MAX_USBH_PORTS];
+	int id_pin[AT91_MAX_USBH_PORTS];
 	u8 ports;				/* number of ports on root hub */
 	u8 overcurrent_supported;
 	u8 vbus_pin_active_low[AT91_MAX_USBH_PORTS];
@@ -352,7 +353,12 @@
 		case USB_PORT_FEAT_POWER:
 			dev_dbg(hcd->self.controller, "SetPortFeat: POWER\n");
 			if (valid_port(wIndex)) {
-				ohci_at91_usb_set_power(pdata, wIndex, 1);
+                               if(!gpio_is_valid(pdata->id_pin[wIndex]) || !gpio_get_value(pdata->id_pin[wIndex])){
+                                       ohci_at91_usb_set_power(pdata, wIndex, 1);
+                               }else{
+                                       dev_dbg(hcd->self.controller,
+                                                                       "Passed, device mode\n");
+                               }
 				ret = 0;
 			}
 
@@ -546,6 +552,45 @@
        return IRQ_HANDLED;
 }
 
+static irqreturn_t ohci_hcd_at91_otg_id_irq(int irq, void *data)
+{
+       struct platform_device *pdev = data;
+       struct at91_usbh_data *pdata = dev_get_platdata(&pdev->dev);
+       int val, gpio, port;
+
+       /* From the GPIO notifying the OTG ID situation, find
+       * out the corresponding port */
+       at91_for_each_port(port) {
+               if (gpio_is_valid(pdata->id_pin[port]) &&
+                               gpio_to_irq(pdata->id_pin[port]) == irq) {
+                       gpio = pdata->id_pin[port];
+                       break;
+               }
+       }
+
+       if (port == AT91_MAX_USBH_PORTS) {
+               dev_err(& pdev->dev, "OTG ID interrupt from unknown GPIO\n");
+               return IRQ_HANDLED;
+       }
+
+       /* debounce */
+       mdelay(10);
+
+       val = gpio_get_value(gpio);
+
+       if (gpio_get_value(gpio)) {
+               dev_dbg(& pdev->dev, "OTG ID gpio changed, new value: device\n");
+               dev_dbg(& pdev->dev, "Disabling output VBUS power\n");
+               ohci_at91_usb_set_power(pdata, port, 0);
+       } else {
+               dev_dbg(& pdev->dev, "OTG ID gpio changed, new value: host\n");
+               dev_dbg(& pdev->dev, "Enabling output VBUS power\n");
+               ohci_at91_usb_set_power(pdata, port, 1);
+       }
+
+       return IRQ_HANDLED;
+}
+
 static const struct of_device_id at91_ohci_dt_ids[] = {
 	{ .compatible = "atmel,at91rm9200-ohci" },
 	{ /* sentinel */ }
@@ -588,6 +633,7 @@
 		 * real USB port on board
 		 */
 		if (i >= pdata->ports) {
+			pdata->id_pin[i] = -EINVAL;
 			pdata->vbus_pin[i] = -EINVAL;
 			pdata->overcurrent_pin[i] = -EINVAL;
 			continue;
@@ -607,16 +653,20 @@
 			continue;
 		}
 		ret = gpio_direction_output(gpio,
-					!pdata->vbus_pin_active_low[i]);
+					pdata->vbus_pin_active_low[i]);
 		if (ret) {
 			dev_err(&pdev->dev,
 				"can't put vbus gpio %d as output %d\n",
-				gpio, !pdata->vbus_pin_active_low[i]);
+				gpio, pdata->vbus_pin_active_low[i]);
 			gpio_free(gpio);
 			continue;
 		}
 
-		ohci_at91_usb_set_power(pdata, i, 1);
+               if (gpio_is_valid(pdata->id_pin[i])){
+                       ohci_at91_usb_set_power(pdata, i, !gpio_get_value(pdata->id_pin[i]));
+               } else {
+                       ohci_at91_usb_set_power(pdata, i, 1);
+               }
 	}
 
 	at91_for_each_port(i) {
@@ -657,6 +707,24 @@
 		}
 	}
 
+       at91_for_each_port(i) {
+           if (i >= pdata->ports)
+               break;
+
+           if (!gpio_is_valid(pdata->id_pin[i]))
+               continue;
+
+               gpio = pdata->id_pin[i];
+
+               ret = request_irq(gpio_to_irq(gpio),
+                                 ohci_hcd_at91_otg_id_irq,
+                                 IRQF_SHARED, "ohci_otg_id", pdev);
+               if (ret) {
+                       gpio_free(gpio);
+                       dev_err(&pdev->dev,
+                               "can't get gpio IRQ for OTG ID\n");
+               }
+       }
 	device_init_wakeup(&pdev->dev, 1);
 	return usb_hcd_at91_probe(&ohci_at91_hc_driver, pdev);
 }
@@ -680,6 +748,13 @@
 			free_irq(gpio_to_irq(pdata->overcurrent_pin[i]), pdev);
 			gpio_free(pdata->overcurrent_pin[i]);
 		}
+
+                at91_for_each_port(i) {
+                       if (!gpio_is_valid(pdata->id_pin[i]))
+                               continue;
+                       free_irq(gpio_to_irq(pdata->id_pin[i]), pdev);
+                       gpio_free(pdata->id_pin[i]);
+               }
 	}
 
 	device_init_wakeup(&pdev->dev, 0);
diff --git a/drivers/usb/gadget/udc/atmel_usba_udc.h b/drivers/usb/gadget/udc/atmel_usba_udc.h
index ea448a3..84b481a 100644
--- a/drivers/usb/gadget/udc/atmel_usba_udc.h
+++ b/drivers/usb/gadget/udc/atmel_usba_udc.h
@@ -337,6 +337,7 @@
 	int irq;
 	int vbus_pin;
 	int vbus_pin_inverted;
+	int id_pin;
 	int num_ep;
 	struct clk *pclk;
 	struct clk *hclk;
@@ -348,6 +349,7 @@
 
 	u16 test_mode;
 	int vbus_prev;
+	int id_prev;
 
 	u32 int_enb_cache;

diff --git a/include/linux/usb/atmel_usba_udc.h b/include/linux/usb/atmel_usba_udc.h
index 
--- a/include/linux/usb/atmel_usba_udc.h
+++ b/include/linux/usb/atmel_usba_udc.h
@@ -16,6 +16,7 @@
 struct usba_platform_data {
 	int			vbus_pin;
 	int			vbus_pin_inverted;
+	int			id_pin;
 	int			num_ep;
 	struct usba_ep_data	ep[0];
 };

